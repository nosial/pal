name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+*'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    name: Build and Upload Release Assets
    outputs:
      tag_name: ${{ steps.release_vars.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: tokenizer, spl, phar
        ini-values: phar.readonly=0
        tools: composer
        
    - name: Set release variables
      id: release_vars
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ github.event.release.name }}" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          # Handle tag push
          tag_name=${GITHUB_REF#refs/tags/}
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          echo "release_name=Release $tag_name" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate release info
      run: |
        echo "Tag: ${{ steps.release_vars.outputs.tag_name }}"
        echo "Name: ${{ steps.release_vars.outputs.release_name }}"
        echo "Is Release Event: ${{ steps.release_vars.outputs.is_release }}"
        
    - name: Install PHPUnit and run tests
      run: |
        make install-phpunit
        make test
        
    - name: Build pal.php
      run: |
        make clean
        make build
        ls -la target/
        
    - name: Build pal.phar
      run: |
        make phar
        ls -la target/
        
    - name: Verify built files
      run: |
        # Verify pal.php
        if [ ! -f target/pal.php ]; then
          echo "ERROR: pal.php was not built"
          exit 1
        fi
        
        # Verify pal.phar
        if [ ! -f target/pal.phar ]; then
          echo "ERROR: pal.phar was not built"
          exit 1
        fi
        
        # Test basic functionality
        php -r "require 'target/pal.php'; echo 'pal.php loads successfully' . PHP_EOL;"
        php -r "require 'target/pal.phar'; echo 'pal.phar loads successfully' . PHP_EOL;"
        
        echo "Built files verification passed"
        
    - name: Create package
      run: |
        make package
        ls -la pal.tar.gz
        
    - name: Create checksums
      run: |
        cd target
        sha256sum pal.php > pal.php.sha256
        sha256sum pal.phar > pal.phar.sha256
        md5sum pal.php > pal.php.md5
        md5sum pal.phar > pal.phar.md5
        
        echo "Checksums created:"
        cat pal.php.sha256
        cat pal.phar.sha256
        
    - name: Create release info
      run: |
        echo "# PAL Release ${{ steps.release_vars.outputs.tag_name }}" > release-info.md
        echo "" >> release-info.md
        echo "Built on: $(date -u)" >> release-info.md
        echo "PHP Version: $(php -v | head -n1)" >> release-info.md
        echo "Source commit: ${{ github.sha }}" >> release-info.md
        echo "" >> release-info.md
        echo "## Files" >> release-info.md
        echo "- \`pal.php\`: Standalone autoloader ($(stat -f%z target/pal.php 2>/dev/null || stat -c%s target/pal.php) bytes)" >> release-info.md
        echo "- \`pal.phar\`: PHAR archive ($(stat -f%z target/pal.phar 2>/dev/null || stat -c%s target/pal.phar) bytes)" >> release-info.md
        echo "- \`pal.tar.gz\`: Distribution package ($(stat -f%z pal.tar.gz 2>/dev/null || stat -c%s pal.tar.gz) bytes)" >> release-info.md
        echo "" >> release-info.md
        echo "## Checksums" >> release-info.md
        echo "\`\`\`" >> release-info.md
        echo "SHA256:" >> release-info.md
        cat target/pal.php.sha256 >> release-info.md
        cat target/pal.phar.sha256 >> release-info.md
        echo "\`\`\`" >> release-info.md
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          target/pal.php
          target/pal.phar
          target/pal.php.sha256
          target/pal.phar.sha256
          target/pal.php.md5
          target/pal.phar.md5
          pal.tar.gz
          release-info.md
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ steps.release_vars.outputs.tag_name }}
        name: ${{ steps.release_vars.outputs.release_name }}
        draft: false
        prerelease: false
        body: |
          ## PAL Release ${{ steps.release_vars.outputs.tag_name }}
          
          This release includes:
          - `pal.php`: Standalone autoloader file
          - `pal.phar`: PHAR archive version
          - `pal.tar.gz`: Distribution package containing both files
          - Checksum files (SHA256 and MD5)
          - Detailed release information
          
          Built with PHP 8.3+ on ${{ runner.os }}
          
          ### Usage
          ```php
          // Using pal.php
          require 'pal.php';
          \pal\Autoloader::autoload('/path/to/your/src');
          
          // Using pal.phar
          require 'pal.phar';
          \pal\Autoloader::autoload('/path/to/your/src');
          ```
          
          ### Verification
          Verify file integrity using the provided checksums:
          ```bash
          sha256sum -c pal.php.sha256
          sha256sum -c pal.phar.sha256
          ```

  test-release-assets:
    needs: build-and-upload
    runs-on: ubuntu-latest
    name: Test Release Assets
    if: github.event_name == 'release'
    
    steps:
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: tokenizer, spl, phar
        
    - name: Download and test release assets
      run: |
        # Wait a moment for assets to be available
        sleep 15
        
        # Download assets using GitHub CLI or direct release API
        TAG_NAME="${{ needs.build-and-upload.outputs.tag_name }}"
        REPO="${{ github.repository }}"
        
        # Download pal.php
        curl -L \
          -H "Accept: application/octet-stream" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://github.com/${REPO}/releases/download/${TAG_NAME}/pal.php" \
          -o pal.php
          
        # Download pal.phar
        curl -L \
          -H "Accept: application/octet-stream" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://github.com/${REPO}/releases/download/${TAG_NAME}/pal.phar" \
          -o pal.phar
          
        # Test they work
        php -r "require 'pal.php'; echo 'Downloaded pal.php works!' . PHP_EOL;"
        php -r "require 'pal.phar'; echo 'Downloaded pal.phar works!' . PHP_EOL;"
        
    - name: Create test scenario
      run: |
        mkdir -p test_release/src
        cat > test_release/src/ReleaseTest.php << 'EOF'
        <?php
        namespace ReleaseTest;
        
        class ReleaseTestClass {
            public function getVersion(): string {
                return '${{ github.event.release.tag_name }}';
            }
        }
        EOF
        
        # Test with pal.php
        php -r "
        require 'pal.php';
        \pal\Autoloader::autoload('test_release/src');
        \$obj = new ReleaseTest\ReleaseTestClass();
        echo 'Release test with pal.php: ' . \$obj->getVersion() . PHP_EOL;
        "
        
        # Test with pal.phar
        php -r "
        require 'pal.phar';
        \pal\Autoloader::autoload('test_release/src');
        \$obj = new ReleaseTest\ReleaseTestClass();
        echo 'Release test with pal.phar: ' . \$obj->getVersion() . PHP_EOL;
        "
        
    - name: Functional test with real autoloading scenario
      run: |
        # Create a more complex test scenario
        mkdir -p complex_test/src/Models
        mkdir -p complex_test/src/Services
        
        cat > complex_test/src/Models/User.php << 'EOF'
        <?php
        namespace App\Models;
        
        class User {
            public function getName(): string {
                return 'Test User';
            }
        }
        EOF
        
        cat > complex_test/src/Services/UserService.php << 'EOF'
        <?php
        namespace App\Services;
        
        use App\Models\User;
        
        class UserService {
            public function createUser(): User {
                return new User();
            }
        }
        EOF
        
        # Test complex autoloading with pal.php
        php -r "
        require 'pal.php';
        \pal\Autoloader::autoload('complex_test/src');
        \$service = new App\Services\UserService();
        \$user = \$service->createUser();
        echo 'Complex test passed: ' . \$user->getName() . PHP_EOL;
        "
        
        rm -rf complex_test
